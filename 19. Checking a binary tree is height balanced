// Checking if a binary tree is height balanced in C

#include <stdio.h>
#include <stdlib.h>
#define bool int

// Node creation    
struct node {
    int item;
    struct node *left;
    struct node *right;
};

// Create a new node
struct node *createNode(int item) {
    struct node *newNode = (struct node *)malloc(sizeof(struct node));
    newNode->item = item;
    newNode->left = NULL;
    newNode->right = NULL;

    return (newNode);
}

// Check for height balance
bool checkHeightBalance(struct node *root, int *height) {
    int leftHeight = 0, rightHeight = 0, l = 0, r = 0; 
    // Check for emptiness..
    if (root == NULL) {
        *height = 0;
        return 1;
    }

    l = checkHeightBalance(root->left, &leftHeight);
    r = checkHeightBalance(root->right, &rightHeight);

    *height = (leftHeight > rightHeight ? leftHeight : rightHeight) + 1;

    if ((leftHeight - rightHeight >= 2) || (rightHeight - leftHeight >= 2))
        return 0;

    else
        return l && r;
}

int main() {
    int height = 0;
    struct node *root = createNode(1);
    root->left = createNode(2);
    root->right = createNode  (3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);

    if (checkHeightBalance(root, &height))
        printf("The tree is balanced.");
    else
        printf("The tree is not balanced.");
}   


