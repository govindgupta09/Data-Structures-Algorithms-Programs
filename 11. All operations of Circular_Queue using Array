// Circular Queue implementation in C

#include <stdio.h>
#include<stdlib.h>
#define SIZE 5

int Curcular_Q[SIZE];
int front = -1, rear = -1;

// Check if the queue is full
int isFull() {
  if ((front == rear + 1) || (front == 0 && rear == SIZE - 1)) return 1;
    return 0;
}

// Check if the queue is empty
int isEmpty() {
  if (front == -1) return 1;
  return 0;
}

// Adding an data
void enQueue() {
    if (isFull())
        printf("\n Queue is Full...!! \n");
    else {
        int data;
        printf("\nEnter element to add in Queue : ");
        scanf("%d",&data);
        if (front == -1) front = 0;
        rear = (rear + 1) % SIZE;
        Curcular_Q[rear] = data;
        printf("\n Inserted -> %d", data);
    }
}

// Removing an data
int deQueue() {
    int data;
    if (isEmpty()) {
        printf("\n Queue is Empty...!! \n");
        return (-1);
    } else {
        data = Curcular_Q[front];
        if (front == rear) {
            front = -1;
            rear = -1;
        } 
        // Q has only one data, so we reset the queue after dequeing it. ?
        else {
            front = (front + 1) % SIZE;
        }
        printf("\n Deleted data -> %d \n", data);
        return (data);
    }
}

// Display the queue
void display() {
  int i;
  if (isEmpty())
    printf(" \n Queue is Empty.\n");
  else {
    printf("\n Front -> %d ", front);
    printf("\n Items -> ");
    for (i = front; i != rear; i = (i + 1) % SIZE) {
      printf("%d ", Curcular_Q[i]);
    }
    printf("%d ", Curcular_Q[i]);
    printf("\n Rear -> %d \n", rear);
  }
}

void main(){
    int choice;
    while (1){
        printf("\n\t1.Enqueue element to Circular_Q \n");
        printf("\t2.Dequeue element from Circular_Q \n");
        printf("\t3.Display all elements of Circular_Q \n");
        printf("\t4.Quit \n");
        printf("\tEnter your choice : ");
        scanf("%d", &choice);
        switch (choice){
            case 1:
                enQueue();
                break;
            case 2:
                deQueue();
                break;
            case 3:
                display();
                break;
            case 4:
                exit(1);
                break;
            default:
                printf("Wrong choice \n");
        } 
    } 
} 
