// Checking if a binary tree is a full binary tree in C

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int item;
    struct Node *left, *right;
};

// Creation of new Node
struct Node *createNode(char k) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->item = k;
    newNode->right = newNode->left = NULL;
    return newNode;
}

bool isFullBinaryTree(struct Node *root) {
    // Checking tree emptiness
    if (root == NULL)
        return true;

    // Checking the presence of children
    if (root->left == NULL && root->right == NULL)
        return true;

    if ((root->left) && (root->right))
        return (isFullBinaryTree(root->left) && isFullBinaryTree(root->right));

  return false;
}

int main() {
    struct Node *root = NULL;
    root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);

    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->left->right->left = createNode(6);
    root->left->right->right = createNode(7);

    if (isFullBinaryTree(root))
        printf("The tree is a full binary tree\n");
    else
        printf("The tree is not a full binary tree\n");
}
